import re
from gvtest.testsuite import *

def check_value(value, expected, log):
    result = True

    error = (float(value) - expected) / expected * 100

    if abs(error) > 2:
        log += f'Got wrong power (value: {value}, expected: {expected}, error: {error} %)'
        result = False

    return (result, log)


def check_output(test, output):

    pattern = r'@power\.measure_(\d+)@([\d.]+)@'

    matches = re.findall(pattern, output)

    expected = [
        0.000101, 0.000151, 0.000351, 0.000434,
        0.000101, 0.000168, 0.000468, 0.000579,
        0.000101, 0.000201, 0.000701, 0.000868,
    ]

    log = ''
    for idx, value in matches:
        (result, log) = check_value(value, expected[int(idx)], log)
        if not result:
            return (result, log)

    return (True, None)

# Called by gvtest to declare the tests
def testset_build(testset):

    #
    # Test list decription
    #
    test = testset.new_test('14_how_to_add_power_traces_to_a_component')
    test.add_command(Shell('clean', 'make clean'))
    test.add_command(Shell('gvsoc', 'make prepare gvsoc'))
    test.add_command(Shell('all', 'make all'))
    test.add_command(Shell('run', 'make run runner_args=--power'))
    test.add_command(Checker('check', check_output))
