from plptest.testsuite import *
import re
import os

def check_cycles(test, output, name, cycle_ref, cycle_error_ref):
    log = ''

    match = re.search(r"The %s took (\d+) cycles" % name, output)
    if not match:
        return (false, "Cycle count not found in log string\n")

    cycle_count = int(match.group(1))
    cycle_diff = abs(cycle_count - cycle_ref)
    cycle_error = cycle_diff / cycle_count * 100

    log += f'Found {cycle_count} cycles vs ref {cycle_ref}, error {cycle_error}% vs {cycle_error_ref}%\n'

    if cycle_error > cycle_error_ref:
        return(False, f'Too high error rate: {cycle_error} vs {cycle_error_ref} expected\n')

    return (True, '')

def check_output(test, output, first_step_cycle_ref, second_step_cycle_ref, cycle_error_ref):
    log = ''

    err, msg = check_cycles(test, output, 'first step', first_step_cycle_ref, cycle_error_ref)
    if not err:
        return (False, f'First step check failed: {msg}')
    log += msg

    err, msg = check_cycles(test, output, 'second step', second_step_cycle_ref, cycle_error_ref)
    if not err:
        return (False, f'Second step check failed: {msg}')
    log += msg

    return (True, log)

def testset_build(testset):

    testset.set_name('snitch')

    test = testset.new_gvrun_test('multiple_accesses')
    test.add_command(Checker('check', check_output, 1008, 2016, 5))
